{"version":3,"sources":["Fade.tsx"],"names":["Fade","children","props","ref","in","animationState","resolvedProps","React","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;AAEA,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAqCC,GAArC,KAAmD;AAC9D,QAAM;AAAEC,IAAAA,EAAE,EAAEC,cAAN;AAAsB,OAAGC;AAAzB,MAA2C,+BAC/C,MAD+C,EAE/CJ,KAF+C,CAAjD,CAD8D,CAK9D;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,2BAAD;AAAoB,IAAA,OAAO,EAAEG;AAA7B,KAAiDC,aAAjD;AAAgE,IAAA,GAAG,EAAEH;AAArE,MACGF,QADH,CADF;AAKD,CAdD;;4BAgBeM,eAAMC,IAAN,eAAWD,eAAME,UAAN,CAAiBT,IAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport PresenceTransition from '../Transitions/PresenceTransition';\nimport type { IFadeProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst Fade = ({ children, ...props }: IFadeProps, ref?: any) => {\n  const { in: animationState, ...resolvedProps } = usePropsResolution(\n    'Fade',\n    props\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <PresenceTransition visible={animationState} {...resolvedProps} ref={ref}>\n      {children}\n    </PresenceTransition>\n  );\n};\n\nexport default React.memo(React.forwardRef(Fade));\n"]}