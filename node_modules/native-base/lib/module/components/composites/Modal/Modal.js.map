{"version":3,"sources":["Modal.tsx"],"names":["React","forwardRef","memo","StyleSheet","Backdrop","Slide","FocusScope","useControllableState","usePropsResolution","ModalContext","Box","Fade","useKeyboardBottomInset","Overlay","useHasResponsiveProps","Modal","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","resolvedProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","useCallback","child","undefined","contextValue","useMemo","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IModalProps } from './types';\nimport { Fade } from '../../composites/Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = true,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IModalProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...resolvedProps\n  } = usePropsResolution('Modal', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = React.useCallback(() => setVisible(false), [setVisible]);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...resolvedProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef,\n      visible,\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  // console.log('visible here', visible);\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      animationPreset={animationPreset}\n      useRNModalOnAndroid\n    >\n      <ModalContext.Provider value={contextValue}>\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </ModalContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(Modal));\n"]}