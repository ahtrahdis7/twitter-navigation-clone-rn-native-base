{"version":3,"sources":["getSpacedChildren.tsx"],"names":["flattenChildren","children","childrenArray","React","Children","toArray","reduce","flatChildren","child","type","Fragment","concat","props","push","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","ResponsiveQueryContext","disableCSSMediaQueries","spacingProp","mx","my","cloneElement","map","index","key","length","width","height"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;AAgBA,SAASA,eAAT,CAAyBC,QAAzB,EAAqE;AACnE,QAAMC,aAAa,GAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBJ,QAAvB,CAAtB;;AACA,SAAOC,aAAa,CAACI,MAAd,CAAqB,CAACC,YAAD,EAAgCC,KAAhC,KAA0C;AACpE,QAAKA,KAAD,CAAmCC,IAAnC,KAA4CN,eAAMO,QAAtD,EAAgE;AAC9D,aAAOH,YAAY,CAACI,MAAb,CACLX,eAAe,CAAEQ,KAAD,CAAmCI,KAAnC,CAAyCX,QAA1C,CADV,CAAP;AAGD;;AACDM,IAAAA,YAAY,CAACM,IAAb,CAAkBL,KAAlB;AACA,WAAOD,YAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD;;AAED,MAAMO,iBAAiB,GAAG,CACxBb,QADwB,EAExBc,KAFwB,EAGxBC,IAHwB,EAIxBC,OAJwB,EAKxBC,OALwB,KAMhB;AACR,MAAIhB,aAAa,GAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBL,eAAe,CAACC,QAAD,CAAtC,CAApB;;AACAC,EAAAA,aAAa,GACXe,OAAO,KAAK,SAAZ,GAAwB,CAAC,GAAGf,aAAJ,EAAmBe,OAAnB,EAAxB,GAAuDf,aADzD;AAGA,QAAMiB,WAAW,GAAGH,IAAI,KAAK,GAAT,GAAe,UAAf,GAA4B,YAAhD,CALQ,CAOR;;AACA,QAAMI,sBAAsB,GAAGjB,eAAMkB,UAAN,CAAiBC,+CAAjB,CAA/B;;AACA,QAAMC,sBAAsB,GAAGH,sBAAsB,CAACG,sBAAtD,CATQ,CAWR;;AACA,MAAIL,OAAJ,EAAa;AACX,UAAMM,WAAmB,GAAG,EAC1B,IAAIR,IAAI,KAAK,GAAT,GAAe;AAAES,QAAAA,EAAE,EAAEV;AAAN,OAAf,GAA+B;AAAEW,QAAAA,EAAE,EAAEX;AAAN,OAAnC;AAD0B,KAA5B;AAIAG,IAAAA,OAAO,gBAAGf,eAAMwB,YAAN,CAAmBT,OAAnB,EAA4B;AACpCC,MAAAA,WADoC;AAEpC,SAAGK;AAFiC,KAA5B,CAAV;AAKAtB,IAAAA,aAAa,GAAGA,aAAa,CAAC0B,GAAd,CAAkB,CAACpB,KAAD,EAAaqB,KAAb,KAA+B;AAAA;;AAC/D,0BACE,6BAAC,cAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,gBAAErB,KAAK,CAACsB,GAAR,0EAA+BD,KAA/B;AAAnB,SACGrB,KADH,EAEGqB,KAAK,GAAG3B,aAAa,CAAC6B,MAAd,GAAuB,CAA/B,IAAoCb,OAFvC,CADF;AAMD,KAPe,CAAhB;AAQD,GAlBD,MAkBO;AACL,UAAMM,WAAmB,GAAG,EAC1B,IAAIR,IAAI,KAAK,GAAT,GAAe;AAAEgB,QAAAA,KAAK,EAAEjB;AAAT,OAAf,GAAkC;AAAEkB,QAAAA,MAAM,EAAElB;AAAV,OAAtC;AAD0B,KAA5B;AAGAb,IAAAA,aAAa,GAAGA,aAAa,CAAC0B,GAAd,CAAkB,CAACpB,KAAD,EAAaqB,KAAb,KAA+B;AAAA;;AAC/D,0BACE,6BAAC,cAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,iBAAErB,KAAK,CAACsB,GAAR,4EAA+BD,KAA/B;AAAnB,SACGrB,KADH,EAEGe,sBAAsB,GACrBM,KAAK,GAAG3B,aAAa,CAAC6B,MAAd,GAAuB,CAA/B,iBAAoC,6BAAC,YAAD,EAASP,WAAT,CADf,gBAGrB,2DALJ,CADF;AAUD,KAXe,CAAhB;AAYD;;AAED,SAAOtB,aAAP;AACD,CAvDD;;eAyDeY,iB","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(children: React.ReactNode): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce((flatChildren: ReactChildArray, child) => {\n    if ((child as React.ReactElement<any>).type === React.Fragment) {\n      return flatChildren.concat(\n        flattenChildren((child as React.ReactElement<any>).props.children)\n      );\n    }\n    flatChildren.push(child);\n    return flatChildren;\n  }, []);\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]}