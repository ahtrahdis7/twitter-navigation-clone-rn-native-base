{"version":3,"sources":["getSpacedChildren.tsx"],"names":["React","default","Box","ResponsiveQueryContext","flattenChildren","children","childrenArray","Children","toArray","reduce","flatChildren","child","type","Fragment","concat","props","push","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","disableCSSMediaQueries","spacingProp","mx","my","cloneElement","map","index","key","length","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(children: React.ReactNode): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce((flatChildren: ReactChildArray, child) => {\n    if ((child as React.ReactElement<any>).type === React.Fragment) {\n      return flatChildren.concat(\n        flattenChildren((child as React.ReactElement<any>).props.children)\n      );\n    }\n    flatChildren.push(child);\n    return flatChildren;\n  }, []);\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]}