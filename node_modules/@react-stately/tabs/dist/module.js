import {useSingleSelectListState as $ijHKZ$useSingleSelectListState} from "@react-stately/list";
import {useRef as $ijHKZ$useRef} from "react";

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $76f919a04c5a7d14$exports = {};

$parcel$export($76f919a04c5a7d14$exports, "useTabListState", () => $76f919a04c5a7d14$export$4ba071daf4e486);


function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
    let state = $ijHKZ$useSingleSelectListState({
        ...props,
        suppressTextValueWarning: true
    });
    let { selectionManager: selectionManager , collection: collection , selectedKey: currentSelectedKey  } = state;
    let lastSelectedKey = $ijHKZ$useRef(currentSelectedKey);
    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)
    let selectedKey = currentSelectedKey;
    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
        selectedKey = collection.getFirstKey();
        // loop over tabs until we find one that isn't disabled and select that
        while(state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())selectedKey = collection.getKeyAfter(selectedKey);
        // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last
        if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();
        // directly set selection because replace/toggle selection won't consider disabled keys
        selectionManager.setSelectedKeys([
            selectedKey
        ]);
    }
    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.
    if (selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);
    lastSelectedKey.current = selectedKey;
    return state;
}




export {$76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState};
//# sourceMappingURL=module.js.map
