{"version":3,"sources":["index.tsx"],"names":["TextArea","wrapperRef","isDisabled","isInvalid","isReadOnly","props","ref","_ref","React","useRef","isHovered","isFocused","setIsFocused","useState","handleFocus","focusState","callback","totalLines","onFocus","onBlur","newProps","extendTheme","e"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAcA,MAAMA,QAAQ,GAAG,CACf;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,UAAd;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,UAArC;AAAiD,KAAGC;AAApD,CADe,EAEfC,GAFe,KAGZ;AACH,QAAMC,IAAI,GAAGC,eAAMC,MAAN,CAAa,IAAb,CAAb;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgB,4BAAS,EAAT,EAAaH,IAAb,CAAtB;;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BJ,eAAMK,QAAN,CAAe,KAAf,CAAlC;;AACA,QAAMC,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;AAC1DJ,IAAAA,YAAY,CAACG,UAAD,CAAZ;AACAC,IAAAA,QAAQ;AACT,GAHD;;AAIA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+B,OAAGC;AAAlC,MAA+C,uCACnD,UADmD,EAEnDf,KAFmD,EAGnD;AAAEK,IAAAA,SAAF;AAAaR,IAAAA,UAAb;AAAyBS,IAAAA,SAAzB;AAAoCR,IAAAA,SAApC;AAA+CC,IAAAA;AAA/C,GAHmD,EAInD;AAAEiB,IAAAA,WAAW,EAAE,CAAC,OAAD;AAAf,GAJmD,CAArD,CARG,CAcH;;AACA,MAAI,kDAAsBhB,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD,eACMe,QADN;AAEE,IAAA,sCAAsC,MAFxC;AAGE,IAAA,aAAa,EAAEH,UAHjB;AAIE,IAAA,UAAU,EAAEhB,UAJd;AAKE,IAAA,GAAG,EAAE,sBAAU,CAACM,IAAD,EAAOD,GAAP,CAAV,CALP;AAME,IAAA,OAAO,EAAGgB,CAAD,IAAO;AACdR,MAAAA,WAAW,CAAC,IAAD,EAAOI,OAAO,GAAG,MAAMA,OAAO,CAACI,CAAD,CAAhB,GAAsB,MAAM,CAAE,CAA5C,CAAX;AACD,KARH;AASE,IAAA,MAAM,EAAGA,CAAD,IAAO;AACbR,MAAAA,WAAW,CAAC,KAAD,EAAQK,MAAM,GAAG,MAAMA,MAAM,CAACG,CAAD,CAAf,GAAqB,MAAM,CAAE,CAA3C,CAAX;AACD,KAXH;AAYE,IAAA,UAAU,EAAEpB,UAZd;AAaE,IAAA,SAAS,EAAEC,SAbb;AAcE,IAAA,UAAU,EAAEC;AAdd,KADF;AAkBD,CAvCD;;4BAyCe,+BAAK,uBAAWJ,QAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  { wrapperRef, isDisabled, isInvalid, isReadOnly, ...props }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    { isHovered, isDisabled, isFocused, isInvalid, isReadOnly },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]}